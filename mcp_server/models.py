# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:45:29+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, EmailStr, Field, RootModel, constr


class Type(Enum):
    primary = 'primary'
    secondary = 'secondary'
    home = 'home'
    office = 'office'
    shipping = 'shipping'
    billing = 'billing'
    other = 'other'


class Assignee(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(
        ...,
        description='A unique identifier for an object.',
        examples=['12345'],
        title='ID',
    )
    username: Optional[str] = Field(None, examples=['Cocoa'], title='Name')


class BadRequestResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestvalidationerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestValidationError'],
    )


class CollectionTag(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(
        ...,
        description='A unique identifier for an object.',
        examples=['12345'],
        title='ID',
    )
    name: Optional[str] = Field(None, examples=['User Experience'], title='Name')


class By(Enum):
    name = 'name'
    created_at = 'created_at'
    updated_at = 'updated_at'


class By1(Enum):
    created_at = 'created_at'
    updated_at = 'updated_at'


class CompanyId(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The unique identifier of the company.',
        examples=['23456'],
        title='Company ID',
    )


class CompanyName(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The name of the company.',
        examples=['SpaceX'],
        title='Company name',
    )


class CreatedAt(RootModel[datetime]):
    root: datetime = Field(
        ...,
        description='The date and time when the object was created.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Created at (timestamp)',
    )


class CreatedBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The user who created the object.',
        examples=['12345'],
        title='Created by',
    )


class Currency(Enum):
    UNKNOWN_CURRENCY = 'UNKNOWN_CURRENCY'
    AED = 'AED'
    AFN = 'AFN'
    ALL = 'ALL'
    AMD = 'AMD'
    ANG = 'ANG'
    AOA = 'AOA'
    ARS = 'ARS'
    AUD = 'AUD'
    AWG = 'AWG'
    AZN = 'AZN'
    BAM = 'BAM'
    BBD = 'BBD'
    BDT = 'BDT'
    BGN = 'BGN'
    BHD = 'BHD'
    BIF = 'BIF'
    BMD = 'BMD'
    BND = 'BND'
    BOB = 'BOB'
    BOV = 'BOV'
    BRL = 'BRL'
    BSD = 'BSD'
    BTN = 'BTN'
    BWP = 'BWP'
    BYR = 'BYR'
    BZD = 'BZD'
    CAD = 'CAD'
    CDF = 'CDF'
    CHE = 'CHE'
    CHF = 'CHF'
    CHW = 'CHW'
    CLF = 'CLF'
    CLP = 'CLP'
    CNY = 'CNY'
    COP = 'COP'
    COU = 'COU'
    CRC = 'CRC'
    CUC = 'CUC'
    CUP = 'CUP'
    CVE = 'CVE'
    CZK = 'CZK'
    DJF = 'DJF'
    DKK = 'DKK'
    DOP = 'DOP'
    DZD = 'DZD'
    EGP = 'EGP'
    ERN = 'ERN'
    ETB = 'ETB'
    EUR = 'EUR'
    FJD = 'FJD'
    FKP = 'FKP'
    GBP = 'GBP'
    GEL = 'GEL'
    GHS = 'GHS'
    GIP = 'GIP'
    GMD = 'GMD'
    GNF = 'GNF'
    GTQ = 'GTQ'
    GYD = 'GYD'
    HKD = 'HKD'
    HNL = 'HNL'
    HRK = 'HRK'
    HTG = 'HTG'
    HUF = 'HUF'
    IDR = 'IDR'
    ILS = 'ILS'
    INR = 'INR'
    IQD = 'IQD'
    IRR = 'IRR'
    ISK = 'ISK'
    JMD = 'JMD'
    JOD = 'JOD'
    JPY = 'JPY'
    KES = 'KES'
    KGS = 'KGS'
    KHR = 'KHR'
    KMF = 'KMF'
    KPW = 'KPW'
    KRW = 'KRW'
    KWD = 'KWD'
    KYD = 'KYD'
    KZT = 'KZT'
    LAK = 'LAK'
    LBP = 'LBP'
    LKR = 'LKR'
    LRD = 'LRD'
    LSL = 'LSL'
    LTL = 'LTL'
    LVL = 'LVL'
    LYD = 'LYD'
    MAD = 'MAD'
    MDL = 'MDL'
    MGA = 'MGA'
    MKD = 'MKD'
    MMK = 'MMK'
    MNT = 'MNT'
    MOP = 'MOP'
    MRO = 'MRO'
    MUR = 'MUR'
    MVR = 'MVR'
    MWK = 'MWK'
    MXN = 'MXN'
    MXV = 'MXV'
    MYR = 'MYR'
    MZN = 'MZN'
    NAD = 'NAD'
    NGN = 'NGN'
    NIO = 'NIO'
    NOK = 'NOK'
    NPR = 'NPR'
    NZD = 'NZD'
    OMR = 'OMR'
    PAB = 'PAB'
    PEN = 'PEN'
    PGK = 'PGK'
    PHP = 'PHP'
    PKR = 'PKR'
    PLN = 'PLN'
    PYG = 'PYG'
    QAR = 'QAR'
    RON = 'RON'
    RSD = 'RSD'
    RUB = 'RUB'
    RWF = 'RWF'
    SAR = 'SAR'
    SBD = 'SBD'
    SCR = 'SCR'
    SDG = 'SDG'
    SEK = 'SEK'
    SGD = 'SGD'
    SHP = 'SHP'
    SLL = 'SLL'
    SOS = 'SOS'
    SRD = 'SRD'
    SSP = 'SSP'
    STD = 'STD'
    SVC = 'SVC'
    SYP = 'SYP'
    SZL = 'SZL'
    THB = 'THB'
    TJS = 'TJS'
    TMT = 'TMT'
    TND = 'TND'
    TOP = 'TOP'
    TRC = 'TRC'
    TRY = 'TRY'
    TTD = 'TTD'
    TWD = 'TWD'
    TZS = 'TZS'
    UAH = 'UAH'
    UGX = 'UGX'
    USD = 'USD'
    USN = 'USN'
    USS = 'USS'
    UYI = 'UYI'
    UYU = 'UYU'
    UZS = 'UZS'
    VEF = 'VEF'
    VND = 'VND'
    VUV = 'VUV'
    WST = 'WST'
    XAF = 'XAF'
    XAG = 'XAG'
    XAU = 'XAU'
    XBA = 'XBA'
    XBB = 'XBB'
    XBC = 'XBC'
    XBD = 'XBD'
    XCD = 'XCD'
    XDR = 'XDR'
    XOF = 'XOF'
    XPD = 'XPD'
    XPF = 'XPF'
    XPT = 'XPT'
    XTS = 'XTS'
    XXX = 'XXX'
    YER = 'YER'
    ZAR = 'ZAR'
    ZMK = 'ZMK'
    ZMW = 'ZMW'
    BTC = 'BTC'
    ETH = 'ETH'


class CustomField(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        None,
        description='More information about the custom field',
        examples=['Employee Level'],
        title='Description',
    )
    id: str = Field(..., examples=['2389328923893298'], title='ID')
    name: Optional[str] = Field(
        None,
        description='Name of the custom field.',
        examples=['employee_level'],
        title='Name',
    )
    value: Optional[Union[str, float, bool, List[str]]] = None


class Description(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='A description of the object.',
        examples=['A description'],
        title='Description',
    )


class Division(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The division the person is currently in. Usually a collection of departments or teams or regions.',
        examples=['Europe'],
        title='Division',
    )


class Type1(Enum):
    primary = 'primary'
    secondary = 'secondary'
    work = 'work'
    personal = 'personal'
    billing = 'billing'
    other = 'other'


class Email(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    email: EmailStr = Field(..., examples=['elon@musk.com'])
    id: Optional[str] = Field(None, examples=['123'])
    type: Optional[Type1] = Field(None, examples=['primary'])


class FirstName(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The first name of the person.',
        examples=['Elon'],
        title='First name',
    )


class Gender(Enum):
    male = 'male'
    female = 'female'
    unisex = 'unisex'
    other = 'other'
    not_specified = 'not_specified'


class Id(RootModel[str]):
    root: str = Field(
        ...,
        description='A unique identifier for an object.',
        examples=['12345'],
        title='ID',
    )


class IssueTrackingEventType(Enum):
    field_ = '*'
    issue_tracking_ticket_created = 'issue-tracking.ticket.created'
    issue_tracking_ticket_updated = 'issue-tracking.ticket.updated'
    issue_tracking_ticket_deleted = 'issue-tracking.ticket.deleted'


class IssueTrackingWebhookEvent(BaseModel):
    entity_id: Optional[str] = Field(
        None,
        description="The service provider's ID of the entity that triggered this event",
        examples=['123456ASDF'],
    )
    entity_type: Optional[str] = Field(
        None,
        description='The type entity that triggered this event',
        examples=['Company'],
    )
    entity_url: Optional[str] = Field(
        None,
        description='The url to retrieve entity detail.',
        examples=['https://unify.apideck.com/crm/contacts/123456'],
    )
    event_id: Optional[str] = Field(
        None,
        description='Unique reference to this request event',
        examples=['9755c355-56c3-4a2f-a2da-86ff4411fccb'],
    )
    execution_attempt: Optional[float] = Field(
        None,
        description='The current count this request event has been attempted',
        examples=[2],
    )
    occurred_at: Optional[str] = Field(
        None,
        description='ISO Datetime for when the original event occurred',
        examples=['2021-10-01T03:14:55.419Z'],
    )
    service_id: Optional[str] = Field(
        None, description='Service provider identifier', examples=['close']
    )
    event_type: Optional[IssueTrackingEventType] = None


class IssuesFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assignee_id: Optional[str] = Field(
        None,
        description='Only return tickets assigned to a specific user',
        examples=['2332bd9c2eaaa5dcfa14721c'],
        title='Assignee ID',
    )
    since: Optional[datetime] = Field(
        None,
        description='Only return tickets since a specific date',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Since date (timestamp)',
    )
    status: Optional[List[str]] = Field(
        [],
        description='Filter by ticket status, can be `open`, `closed` or `all`. Will passthrough if none of the above match',
        examples=[['closed']],
        title='ticket status',
    )


class Language(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='language code according to ISO 639-1. For the United States - EN',
        examples=['EN'],
    )


class LastName(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The last name of the person.',
        examples=['Musk'],
        title='Last name',
    )


class Links(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Link to navigate to the current page through the API',
        examples=['https://unify.apideck.com/crm/companies'],
    )
    next: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM'
        ],
    )
    previous: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D'
        ],
    )


class Cursors(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Cursor to navigate to the current page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjI='],
    )
    next: Optional[str] = Field(
        None,
        description='Cursor to navigate to the next page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjM='],
    )
    previous: Optional[str] = Field(
        None,
        description='Cursor to navigate to the previous page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjE='],
    )


class Meta(BaseModel):
    cursors: Optional[Cursors] = Field(
        None,
        description='Cursors to navigate to previous or next pages through the API',
    )
    items_on_page: Optional[int] = Field(
        None,
        description='Number of items returned in the data property of the response',
        examples=[50],
    )


class MiddleName(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='Middle name of the person.',
        examples=['D.'],
        title='Middle name',
    )


class NotFoundResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Not Found'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unknown Widget'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#entitynotfounderror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[404]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['EntityNotFoundError']
    )


class NotImplementedResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Not Implemented'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unmapped Attribute'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#mappingerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[501]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['MappingError']
    )


class PassThroughQuery(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    example_downstream_property: Optional[str] = Field(
        None,
        description='All passthrough query parameters are passed along to the connector as is (?pass_through[search]=leads becomes ?search=leads)',
    )


class PaymentRequiredResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=['You have reached your limit of 2000'],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Payment Required'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Request Limit Reached'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestlimiterror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[402]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['RequestLimitError']
    )


class PaymentUnit(Enum):
    hour = 'hour'
    week = 'week'
    month = 'month'
    year = 'year'
    paycheck = 'paycheck'


class Type2(Enum):
    primary = 'primary'
    secondary = 'secondary'
    home = 'home'
    work = 'work'
    office = 'office'
    mobile = 'mobile'
    assistant = 'assistant'
    fax = 'fax'
    direct_dial_in = 'direct-dial-in'
    personal = 'personal'
    other = 'other'


class PhoneNumber(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    area_code: Optional[str] = Field(None, examples=['323'], title='Area code')
    country_code: Optional[str] = Field(None, examples=['1'], title='Country code')
    extension: Optional[str] = Field(None, examples=['105'], title='Phone extension')
    id: Optional[str] = Field(None, examples=['12345'])
    number: constr(min_length=1) = Field(
        ..., examples=['111-111-1111'], title='Phone number'
    )
    type: Optional[Type2] = Field(None, examples=['primary'])


class PhotoUrl(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The URL of the photo of a person.',
        examples=['https://unavatar.io/elon-musk'],
        title='Photo URL',
    )


class RowVersion(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.',
        examples=['1-12345'],
        title='Row version',
    )


class SortDirection(Enum):
    asc = 'asc'
    desc = 'desc'


class Priority(Enum):
    low = 'low'
    normal = 'normal'
    high = 'high'
    urgent = 'urgent'


class TicketsSort(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    by: Optional[By1] = Field(
        None,
        description='The field on which to sort the Tickets',
        examples=['created_at'],
    )
    direction: Optional[SortDirection] = 'asc'


class Title(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The job title of the person.',
        examples=['CEO'],
        title='Job title',
    )


class Detail(BaseModel):
    context: Optional[str] = None
    error: Optional[Dict[str, Any]] = None


class TooManyRequestsResponse(BaseModel):
    detail: Optional[Detail] = None
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)',
        examples=['Too Many Requests'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Connector Rate Limit Error'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#connectorratelimiterror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[429]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['ConnectorRateLimitError'],
    )


class UnauthorizedResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=[
            'Failed to generate valid JWT Session. Verify applicationId is correct'
        ],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Unauthorized'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unauthorized Request'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[401]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['UnauthorizedError']
    )


class UnexpectedErrorResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestHeadersValidationError'],
    )


class UnifiedId(BaseModel):
    id: str = Field(
        ...,
        description='The unique identifier of the resource',
        examples=['12345'],
        title='Id',
    )


class UnprocessableResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=[
            'Unprocessable request, please verify your request headers and body.'
        ],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Unprocessable Entity'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid State'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#invalidstateerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[422]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['InvalidStateError']
    )


class UpdateCommentResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tickets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['github']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateTicketResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['update'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tickets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['github']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdatedAt(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(
        None,
        description='The date and time when the object was last updated.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Updated at (timestamp)',
    )


class UpdatedBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='The user who last updated the object.',
        examples=['12345'],
        title='Updated by',
    )


class Type3(Enum):
    primary = 'primary'
    secondary = 'secondary'
    work = 'work'
    personal = 'personal'
    other = 'other'


class Website(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[str] = Field(None, examples=['12345'])
    type: Optional[Type3] = Field(None, examples=['primary'])
    url: constr(min_length=1) = Field(..., examples=['http://example.com'])


class Address(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    city: Optional[str] = Field(
        None, description='Name of city.', examples=['San Francisco']
    )
    contact_name: Optional[str] = Field(None, examples=['Elon Musk'])
    country: Optional[str] = Field(
        None,
        description='country code according to ISO 3166-1 alpha-2.',
        examples=['US'],
    )
    county: Optional[str] = Field(
        None,
        description='Address field that holds a sublocality, such as a county',
        examples=['Santa Clara'],
    )
    email: Optional[str] = Field(None, examples=['elon@musk.com'])
    fax: Optional[str] = Field(None, examples=['122-111-1111'])
    id: Optional[str] = Field(None, examples=['123'])
    latitude: Optional[str] = Field(None, examples=['40.759211'])
    line1: Optional[str] = Field(
        None,
        description='Line 1 of the address e.g. number, street, suite, apt #, etc.',
        examples=['Main street'],
    )
    line2: Optional[str] = Field(
        None, description='Line 2 of the address', examples=['apt #']
    )
    line3: Optional[str] = Field(
        None, description='Line 3 of the address', examples=['Suite #']
    )
    line4: Optional[str] = Field(
        None, description='Line 4 of the address', examples=['delivery instructions']
    )
    longitude: Optional[str] = Field(None, examples=['-73.984638'])
    name: Optional[str] = Field(None, examples=['HQ US'])
    phone_number: Optional[str] = Field(None, examples=['111-111-1111'])
    postal_code: Optional[str] = Field(
        None, description='Zip code or equivalent.', examples=['94104']
    )
    row_version: Optional[RowVersion] = None
    salutation: Optional[str] = Field(None, examples=['Mr'])
    state: Optional[str] = Field(None, description='Name of state', examples=['CA'])
    street_number: Optional[str] = Field(
        None, description='Street number', examples=['25']
    )
    string: Optional[str] = Field(
        None,
        examples=['25 Spring Street, Blackburn, VIC 3130'],
        title="The address string. Some APIs don't provide structured address data.",
    )
    type: Optional[Type] = Field(None, examples=['primary'])
    website: Optional[str] = Field(None, examples=['https://elonmusk.com'])


class Collection(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    created_at: Optional[CreatedAt] = None
    description: Optional[str] = Field(
        None,
        description='Description of the collection',
        examples=['IT Issues'],
        title='Description',
    )
    id: Id
    name: Optional[str] = Field(
        None,
        description='Name of the collection',
        examples=['Main IT Issues'],
        title='name',
    )
    parent_id: Optional[str] = Field(
        None, description="The collections's parent ID", examples=['12345']
    )
    type: Optional[str] = Field(
        None, description="The collections's type", examples=['Technical'], title='Type'
    )
    updated_at: Optional[UpdatedAt] = None


class CollectionTicketComment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    body: Optional[str] = Field(
        None,
        description='Body of the comment',
        examples=['What internet provider do you use?'],
        title='Body',
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    id: Optional[Id] = None
    updated_at: Optional[UpdatedAt] = None


class CollectionUser(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    created_at: Optional[CreatedAt] = None
    email: Optional[str] = Field(None, examples=['elon@musk.com'])
    first_name: Optional[str] = Field(None, examples=['Elon'])
    id: Optional[Id] = None
    last_name: Optional[str] = Field(None, examples=['Musk'])
    name: Optional[str] = Field(None, examples=['Elon Musk'], title='Name')
    photo_url: Optional[PhotoUrl] = None
    updated_at: Optional[UpdatedAt] = None


class CollectionsSort(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    by: Optional[By] = Field(
        None,
        description='The field on which to sort the Collections',
        examples=['name'],
    )
    direction: Optional[SortDirection] = 'asc'


class CommentsSort(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    by: Optional[By1] = Field(
        None,
        description='The field on which to sort the Comments',
        examples=['created_at'],
    )
    direction: Optional[SortDirection] = 'asc'


class CreateCommentResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tickets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['jira']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CreateTicketResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tickets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['jira']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteCommentResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tickets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['jira']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteTicketResponse(BaseModel):
    data: UnifiedId
    operation: str = Field(..., description='Operation performed', examples=['add'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tickets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['jira']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class Department(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    code: Optional[str] = Field(None, examples=['2'], title='Code')
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    description: Optional[str] = Field(None, examples=['R&D'], title='Description')
    id: Optional[Id] = None
    name: Optional[str] = Field(
        None, description='Department name', examples=['R&D'], title='Name'
    )
    parent_id: Optional[str] = Field(None, description='Parent ID', examples=['22345'])
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class GetCollectionResponse(BaseModel):
    data: Collection
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tickets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['jira']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetCollectionTagsResponse(BaseModel):
    data: List[CollectionTag]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tickets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['jira']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetCollectionUserResponse(BaseModel):
    data: CollectionUser
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tickets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['jira']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetCollectionUsersResponse(BaseModel):
    data: List[CollectionUser]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tickets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['jira']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetCollectionsResponse(BaseModel):
    data: List[Collection]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tickets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['jira']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetCommentResponse(BaseModel):
    data: CollectionTicketComment
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tickets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['sage-hr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetCommentsResponse(BaseModel):
    data: List[CollectionTicketComment]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tickets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['jira']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class Ticket(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assignees: Optional[List[Assignee]] = None
    collection_id: Optional[str] = Field(
        None, description="The ticket's collection ID", examples=['12345']
    )
    completed_at: Optional[datetime] = Field(
        None,
        description='When the ticket was completed',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Completed at (timestamp)',
    )
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    description: Optional[str] = Field(
        None,
        description="The ticket's description. HTML version of description is mapped if supported by the third-party platform",
        examples=['I am facing issues with my internet connection'],
        title='Description',
    )
    due_date: Optional[datetime] = Field(
        None,
        description='Due date of the ticket',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Due date (timestamp)',
    )
    id: Id
    parent_id: Optional[str] = Field(
        None, description="The ticket's parent ID", examples=['12345']
    )
    priority: Optional[Priority] = Field(
        None, description='Priority of the ticket', examples=['high'], title='Priority'
    )
    status: Optional[str] = Field(
        None,
        description='The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.',
        examples=['open'],
    )
    subject: Optional[str] = Field(
        None,
        description='Subject of the ticket',
        examples=['Technical Support Request'],
        title='Subject',
    )
    tags: Optional[List[CollectionTag]] = None
    type: Optional[str] = Field(
        None, description="The ticket's type", examples=['Technical'], title='Type'
    )
    updated_at: Optional[UpdatedAt] = None


class GetTicketResponse(BaseModel):
    data: Ticket
    operation: str = Field(..., description='Operation performed', examples=['one'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tickets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['sage-hr']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetTicketsResponse(BaseModel):
    data: List[Ticket]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    operation: str = Field(..., description='Operation performed', examples=['all'])
    resource: str = Field(
        ..., description='Unified API resource name', examples=['Tickets']
    )
    service: str = Field(
        ..., description='Apideck ID of service provider', examples=['jira']
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )
